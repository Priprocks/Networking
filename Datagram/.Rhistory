best <- z
}
}
centers <- matrix(Z$centers, k)
dimnames(centers) <- list(1L:k, dimnames(x)[[2L]])
cluster <- Z$c1
if (!is.null(rn <- rownames(x)))
names(cluster) <- rn
totss <- sum(scale(x, scale = FALSE)^2)
# structure(list(cluster = cluster, centers = centers, totss = totss,
# withinss = Z$wss, tot.withinss = best, betweenss = totss -
# best, size = Z$nc, iter = Z$iter, ifault = Z$ifault),
# class = "kmeans")
Z
}
kmean<-function (x, centers, iter.max = 10L, nstart = 1L, algorithm = c("Hartigan-Wong",
"Lloyd", "Forgy", "MacQueen"), trace = FALSE)
{
.Mimax <- .Machine$integer.max
do_one <- function(nmeth) {
isteps.Qtran <- as.integer(min(.Mimax, 50 * m))
iTran <- c(isteps.Qtran, integer(max(0, k - 1)))
Z <- .Fortran(getAnywhere(C_kmns)gwe, x, m, p, centers = centers,
as.integer(k), c1 = integer(m), c2 = integer(m),
nc = integer(k), double(k), double(k), ncp = integer(k),
D = double(m), iTran = iTran, live = integer(k),
iter = iter.max, wss = double(k), ifault = as.integer(trace))
switch(Z$ifault, stop("empty cluster: try a better set of initial centers",
call. = FALSE), Z$iter <- max(Z$iter, iter.max +
1L), stop("number of cluster centres must lie between 1 and nrow(x)",
call. = FALSE), warning(gettextf("Quick-TRANSfer stage steps exceeded maximum (= %d)",
isteps.Qtran), call. = FALSE))
if (m23 <- any(nmeth == c(2L, 3L))) {
if (any(Z$nc == 0))
warning("empty cluster: try a better set of initial centers",
call. = FALSE)
}
if (Z$iter > iter.max) {
warning(sprintf(ngettext(iter.max, "did not converge in %d iteration",
"did not converge in %d iterations"), iter.max),
call. = FALSE, domain = NA)
if (m23)
Z$ifault <- 2L
}
if (nmeth %in% c(2L, 3L)) {
if (any(Z$nc == 0))
warning("empty cluster: try a better set of initial centers",
call. = FALSE)
}
}
x <- as.matrix(x)
m <- as.integer(nrow(x))
if (is.na(m))
stop("invalid nrow(x)")
p <- as.integer(ncol(x))
if (is.na(p))
stop("invalid ncol(x)")
if (missing(centers))
stop("'centers' must be a number or a matrix")
nmeth <- switch(match.arg(algorithm), `Hartigan-Wong` = 1L,
Lloyd = 2L, Forgy = 2L, MacQueen = 3L)
storage.mode(x) <- "double"
if (length(centers) == 1L) {
k <- centers
if (nstart == 1L)
centers <- x[sample.int(m, k), , drop = FALSE]
if (nstart >= 2L || any(duplicated(centers))) {
cn <- unique(x)
mm <- nrow(cn)
if (mm < k)
stop("more cluster centers than distinct data points.")
centers <- cn[sample.int(mm, k), , drop = FALSE]
}
}
else {
centers <- as.matrix(centers)
if (any(duplicated(centers)))
stop("initial centers are not distinct")
cn <- NULL
k <- nrow(centers)
if (m < k)
stop("more cluster centers than data points")
}
k <- as.integer(k)
if (is.na(k))
stop(gettextf("invalid value of %s", "'k'"), domain = NA)
if (k == 1L)
nmeth <- 3L
iter.max <- as.integer(iter.max)
if (is.na(iter.max) || iter.max < 1L)
stop("'iter.max' must be positive")
if (ncol(x) != ncol(centers))
stop("must have same number of columns in 'x' and 'centers'")
storage.mode(centers) <- "double"
Z <- do_one(nmeth)
best <- sum(Z$wss)
if (nstart >= 2L && !is.null(cn))
for (i in 2:nstart) {
centers <- cn[sample.int(mm, k), , drop = FALSE]
ZZ <- do_one(nmeth)
if ((z <- sum(ZZ$wss)) < best) {
Z <- ZZ
best <- z
}
}
centers <- matrix(Z$centers, k)
dimnames(centers) <- list(1L:k, dimnames(x)[[2L]])
cluster <- Z$c1
if (!is.null(rn <- rownames(x)))
names(cluster) <- rn
totss <- sum(scale(x, scale = FALSE)^2)
# structure(list(cluster = cluster, centers = centers, totss = totss,
# withinss = Z$wss, tot.withinss = best, betweenss = totss -
# best, size = Z$nc, iter = Z$iter, ifault = Z$ifault),
# class = "kmeans")
Z
}
kmean<-function (x, centers, iter.max = 10L, nstart = 1L, algorithm = c("Hartigan-Wong",
"Lloyd", "Forgy", "MacQueen"), trace = FALSE)
{
.Mimax <- .Machine$integer.max
do_one <- function(nmeth) {
isteps.Qtran <- as.integer(min(.Mimax, 50 * m))
iTran <- c(isteps.Qtran, integer(max(0, k - 1)))
Z <- .Fortran(getAnywhere(C_kmns), x, m, p, centers = centers,
as.integer(k), c1 = integer(m), c2 = integer(m),
nc = integer(k), double(k), double(k), ncp = integer(k),
D = double(m), iTran = iTran, live = integer(k),
iter = iter.max, wss = double(k), ifault = as.integer(trace))
switch(Z$ifault, stop("empty cluster: try a better set of initial centers",
call. = FALSE), Z$iter <- max(Z$iter, iter.max +
1L), stop("number of cluster centres must lie between 1 and nrow(x)",
call. = FALSE), warning(gettextf("Quick-TRANSfer stage steps exceeded maximum (= %d)",
isteps.Qtran), call. = FALSE))
if (m23 <- any(nmeth == c(2L, 3L))) {
if (any(Z$nc == 0))
warning("empty cluster: try a better set of initial centers",
call. = FALSE)
}
if (Z$iter > iter.max) {
warning(sprintf(ngettext(iter.max, "did not converge in %d iteration",
"did not converge in %d iterations"), iter.max),
call. = FALSE, domain = NA)
if (m23)
Z$ifault <- 2L
}
if (nmeth %in% c(2L, 3L)) {
if (any(Z$nc == 0))
warning("empty cluster: try a better set of initial centers",
call. = FALSE)
}
}
x <- as.matrix(x)
m <- as.integer(nrow(x))
if (is.na(m))
stop("invalid nrow(x)")
p <- as.integer(ncol(x))
if (is.na(p))
stop("invalid ncol(x)")
if (missing(centers))
stop("'centers' must be a number or a matrix")
nmeth <- switch(match.arg(algorithm), `Hartigan-Wong` = 1L,
Lloyd = 2L, Forgy = 2L, MacQueen = 3L)
storage.mode(x) <- "double"
if (length(centers) == 1L) {
k <- centers
if (nstart == 1L)
centers <- x[sample.int(m, k), , drop = FALSE]
if (nstart >= 2L || any(duplicated(centers))) {
cn <- unique(x)
mm <- nrow(cn)
if (mm < k)
stop("more cluster centers than distinct data points.")
centers <- cn[sample.int(mm, k), , drop = FALSE]
}
}
else {
centers <- as.matrix(centers)
if (any(duplicated(centers)))
stop("initial centers are not distinct")
cn <- NULL
k <- nrow(centers)
if (m < k)
stop("more cluster centers than data points")
}
k <- as.integer(k)
if (is.na(k))
stop(gettextf("invalid value of %s", "'k'"), domain = NA)
if (k == 1L)
nmeth <- 3L
iter.max <- as.integer(iter.max)
if (is.na(iter.max) || iter.max < 1L)
stop("'iter.max' must be positive")
if (ncol(x) != ncol(centers))
stop("must have same number of columns in 'x' and 'centers'")
storage.mode(centers) <- "double"
Z <- do_one(nmeth)
best <- sum(Z$wss)
if (nstart >= 2L && !is.null(cn))
for (i in 2:nstart) {
centers <- cn[sample.int(mm, k), , drop = FALSE]
ZZ <- do_one(nmeth)
if ((z <- sum(ZZ$wss)) < best) {
Z <- ZZ
best <- z
}
}
centers <- matrix(Z$centers, k)
dimnames(centers) <- list(1L:k, dimnames(x)[[2L]])
cluster <- Z$c1
if (!is.null(rn <- rownames(x)))
names(cluster) <- rn
totss <- sum(scale(x, scale = FALSE)^2)
# structure(list(cluster = cluster, centers = centers, totss = totss,
# withinss = Z$wss, tot.withinss = best, betweenss = totss -
# best, size = Z$nc, iter = Z$iter, ifault = Z$ifault),
# class = "kmeans")
Z
}
cars<-cars
kmean(cars,3)
?information-gain
??informaton-gain
??informaton.gain
??information.gain
??Fselector
install.packages("FSelector")
install.packages("rJava")
install.packages("FSelector")
data(iris)
weights <- information.gain(Species~., iris)
print(weights)
subset <- cutoff.k(weights, 2)
f <- as.simple.formula(subset, "Species")
print(f)
library("FSelector", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
data(iris)
weights <- information.gain(Species~., iris)
print(weights)
subset <- cutoff.k(weights, 2)
f <- as.simple.formula(subset, "Species")
print(f)
subset <- cutoff.k(weights, 2)
library("FSelector", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_66.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
library(rJava)
iris
iris<-iris
?c5.0
??c5.0
?c50
??c50
install.packages("C50")
install.packages("C50")
library("C50", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
C5.0(iris)
data(churn)
treeModel <- C5.0(x = churnTrain[, -20], y = churnTrain$churn)
treeModel
summary(treeModel)
view(churn)
View(churn)
data(churn)
View(churnTest)
View(churnTrain)
View(churnTest)
plot(treeModel)
C5.0
UseMethod("C5.0")
?UseMethod
UseMethod("C5.0)
UseMethod(C5.0)
View(iris)
kmeans
getAnywhere(C_kmns)
kmeans
?data.frame
?sample.int
?vector
v<-vector(mode = "numeric",length=5)
v
?for
?for
rm(list=ls())
hist(rbeta(10000,5,2))
hist(rbeta(10000,2,5))
hist(rbeta(10000,5,5))
hist(rbeta(10000,5,2))
hist(rbeta(10000,2,5))
rm(list=ls())
PosSkew<-hist(rbeta(10000,2,5))
rm(list=ls())
PosSkew<-rbeta(10000,2,5)
PosSkew
hist(PosSkew)
hist(rbeta(10000,2,5))
library(rcompanion)
plotNormalHistogram(PosSkew)
lines(density(PosSkew))
hist(PosSkew)
lines(density(PosSkew))
lines(density(PosSkew))
hist(PosSkew, prob=TRUE, col="grey")
hist(PosSkew)
hist(PosSkew, prob=TRUE, col="grey")
lines(density(PosSkew), col="blue", lwd=2)
lines(density(PosSkew, adjust=2), lty="dotted", col="darkgreen", lwd=2)
hist(PosSkew, prob=TRUE, col="grey")
lines(density(PosSkew, adjust=2), lty="dotted", col="darkgreen", lwd=2)
abline(v=median(PosSkew))
?abline
abline(v=median(PosSkew),col="red")
abline(v=median(PosSkew),col="red",lwd=2)
abline(v=mean(PosSkew),col="red",lwd=2)
abline(v=mean(PosSkew),col="blue",lwd=2)
abline(v=mode(PosSkew),col="brown",lwd=2)
abline(v=mode(PosSkew),col="black",lwd=2)
abline(v=mode(PosSkew),col="red",lwd=2)
abline(v=mean(PosSkew),col="blue",lwd=2)
abline(v=mode(PosSkew),col="red",lwd=2)
mode(PosSkew)
?mode
Mode <- function(x, na.rm = FALSE) {
if(na.rm){
x = x[!is.na(x)]
}
ux <- unique(x)
return(ux[which.max(tabulate(match(x, ux)))])
}
abline(v=Mode(PosSkew),col="red",lwd=2)
abline(v=Mode(PosSkew),col="brown",lwd=2)
?legend
legend("topright", inset=.05, title="Legend",
c("Mean","Median","Mode"), fill=c("blue","red","brown"), horiz=TRUE)
legend("topright", inset=.05, title="Legend",
c("Mean","Median","Mode"), fill=c("blue","red","brown"))
Mode
#Generating the data------
PosSkew<-rbeta(10000,2,5)
NegSkew<-rbeta(10000,5,2)
Normal<-rbeta(10000,5,5)
#-------------------------
#Visualizing Positively Skewed Data:---------------------------------------
hist(PosSkew, prob=TRUE, col="grey")
lines(density(PosSkew, adjust=2), lty="dotted", col="darkgreen", lwd=2)
abline(v=median(PosSkew),col="blue",lwd=2) #Mean
abline(v=median(PosSkew),col="red",lwd=2)  #Median
abline(v=median(PosSkew),col="red",lwd=2)  #Mode
legend("topright", inset=.05, title="Legend",
c("Mean","Median","Mode"), fill=c("blue","red","brown"))
#--------------------------------------------------------------------------
#Visualizing Positively Skewed Data:---------------------------------------
hist(PosSkew, prob=TRUE, col="grey")
lines(density(PosSkew, adjust=2), lty="dotted", col="darkgreen", lwd=2)
abline(v=median(PosSkew),col="blue",lwd=2) #Mean
abline(v=mean(PosSkew),col="red",lwd=2)  #Median
abline(v=Mode(PosSkew),col="brown",lwd=2)  #Mode
legend("topright", inset=.05, title="Legend",
c("Mean","Median","Mode"), fill=c("blue","red","brown"))
#--------------------------------------------------------------------------
#Visualizing Negatively Skewed Data:---------------------------------------
hist(NegSkew, prob=TRUE, col="grey")
lines(density(NegSkew, adjust=2), lty="dotted", col="darkgreen", lwd=2)
abline(v=mean(NegSkew),col="blue",lwd=2) #Mean
abline(v=median(NegSkew),col="red",lwd=2)  #Median
abline(v=Mode(NegSkew),col="brown",lwd=2)  #Mode
legend("topright", inset=.05, title="Legend",
c("Mean","Median","Mode"), fill=c("blue","red","brown"))
#--------------------------------------------------------------------------
#Visualizing Negatively Skewed Data:---------------------------------------
hist(NegSkew, prob=TRUE, col="grey")
lines(density(NegSkew, adjust=2), lty="dotted", col="darkgreen", lwd=2)
abline(v=mean(NegSkew),col="blue",lwd=2) #Mean
abline(v=median(NegSkew),col="red",lwd=2)  #Median
abline(v=Mode(NegSkew),col="brown",lwd=2)  #Mode
legend("topleft", inset=.05, title="Legend",
c("Mean","Median","Mode"), fill=c("blue","red","brown"))
#--------------------------------------------------------------------------
#Visualizing Normal Data:--------------------------------------------------
hist(Normal, prob=TRUE, col="grey")
lines(density(Normal, adjust=2), lty="dotted", col="darkgreen", lwd=2)
abline(v=mean(Normal),col="blue",lwd=2) #Mean
abline(v=median(Normal),col="red",lwd=2)  #Median
abline(v=Mode(Normal),col="brown",lwd=2)  #Mode
legend("topright", inset=.05, title="Legend",
c("Mean","Median","Mode"), fill=c("blue","red","brown"))
#--------------------------------------------------------------------------
#Visualizing Normal Data:--------------------------------------------------
hist(Normal, prob=TRUE, col="grey")
lines(density(Normal, adjust=2), lty="dotted", col="darkgreen", lwd=3)
abline(v=mean(Normal),col="blue",lwd=2) #Mean
abline(v=median(Normal),col="red",lwd=2)  #Median
abline(v=Mode(Normal),col="brown",lwd=2)  #Mode
legend("topright", inset=.05, title="Legend",
c("Mean","Median","Mode"), fill=c("blue","red","brown"))
#--------------------------------------------------------------------------
#Visualizing Normal Data:--------------------------------------------------
hist(Normal, prob=TRUE, col="grey")
lines(density(Normal, adjust=2), lty="dotted", col="darkgreen", lwd=2)
abline(v=mean(Normal),col="blue",lwd=3) #Mean
abline(v=median(Normal),col="red",lwd=2)  #Median
abline(v=Mode(Normal),col="brown",lwd=2)  #Mode
legend("topright", inset=.05, title="Legend",
c("Mean","Median","Mode"), fill=c("blue","red","brown"))
#--------------------------------------------------------------------------
#Visualizing Negatively Skewed Data:---------------------------------------
hist(NegSkew, prob=TRUE, col="grey")
lines(density(NegSkew, adjust=2), lty="dotted", col="darkgreen", lwd=2)
abline(v=mean(NegSkew),col="blue",lwd=2) #Mean
abline(v=median(NegSkew),col="red",lwd=2)  #Median
abline(v=Mode(NegSkew),col="brown",lwd=2)  #Mode
legend("topleft", inset=.05, title="Legend",
c("Mean","Median","Mode"), fill=c("blue","red","brown"))
#--------------------------------------------------------------------------
scatter.smooth(x=cars$speed, y=cars$dist, main="Dist ~ Speed")  # scatterplot
#Visualizing Positively Skewed Data:---------------------------------------
hist(PosSkew, prob=TRUE, col="grey")
lines(density(PosSkew, adjust=2), lty="dotted", col="darkgreen", lwd=2)
abline(v=mean(PosSkew),col="blue",lwd=2) #Mean
abline(v=median(PosSkew),col="red",lwd=2)  #Median
abline(v=Mode(PosSkew),col="brown",lwd=2)  #Mode
legend("topright", inset=.05, title="Legend",
c("Mean","Median","Mode"), fill=c("blue","red","brown"))
#--------------------------------------------------------------------------
#Visualizing Negatively Skewed Data:---------------------------------------
hist(NegSkew, prob=TRUE, col="grey")
lines(density(NegSkew, adjust=2), lty="dotted", col="darkgreen", lwd=2)
abline(v=mean(NegSkew),col="blue",lwd=2) #Mean
abline(v=median(NegSkew),col="red",lwd=2)  #Median
abline(v=Mode(NegSkew),col="brown",lwd=2)  #Mode
legend("topleft", inset=.05, title="Legend",
c("Mean","Median","Mode"), fill=c("blue","red","brown"))
#--------------------------------------------------------------------------
?sub
scatter.smooth(x=cars$speed, y=cars$dist, main="Dist ~ Speed")  # scatterplot
paste("Skewness:", round(e1071::skewness(cars$dist), 2))
install.packages("e1071")
paste("Skewness:", round(e1071::skewness(cars$dist), 2))
hist(NegSkew, prob=TRUE, col="grey",sub=paste("Skewness:", round(e1071::skewness(NegSkew), 2)))
#Visualizing Positively Skewed Data:---------------------------------------
hist(PosSkew, prob=TRUE, col="grey",
sub=paste("Skewness:", round(e1071::skewness(PosSkew), 2)))
lines(density(PosSkew, adjust=2), lty="dotted", col="darkgreen", lwd=2)
abline(v=mean(PosSkew),col="blue",lwd=2) #Mean
abline(v=median(PosSkew),col="red",lwd=2)  #Median
abline(v=Mode(PosSkew),col="brown",lwd=2)  #Mode
legend("topright", inset=.05, title="Legend",
c("Mean","Median","Mode"), fill=c("blue","red","brown"))
#--------------------------------------------------------------------------
#Visualizing Negatively Skewed Data:---------------------------------------
hist(NegSkew, prob=TRUE, col="grey",
sub=paste("Skewness:", round(e1071::skewness(NegSkew), 2)))
lines(density(NegSkew, adjust=2), lty="dotted", col="darkgreen", lwd=2)
abline(v=mean(NegSkew),col="blue",lwd=2) #Mean
abline(v=median(NegSkew),col="red",lwd=2)  #Median
abline(v=Mode(NegSkew),col="brown",lwd=2)  #Mode
legend("topleft", inset=.05, title="Legend",
c("Mean","Median","Mode"), fill=c("blue","red","brown"))
#--------------------------------------------------------------------------
#Visualizing Normal Data:--------------------------------------------------
hist(Normal, prob=TRUE, col="grey",
sub=paste("Skewness:", round(e1071::skewness(Normal), 2)))
lines(density(Normal, adjust=2), lty="dotted", col="darkgreen", lwd=2)
abline(v=mean(Normal),col="blue",lwd=3) #Mean
abline(v=median(Normal),col="red",lwd=2)  #Median
abline(v=Mode(Normal),col="brown",lwd=2)  #Mode
legend("topright", inset=.05, title="Legend",
c("Mean","Median","Mode"), fill=c("blue","red","brown"))
#--------------------------------------------------------------------------
set.seed(100)  # setting seed to reproduce results of random sampling
trainingRowIndex <- sample(1:nrow(cars), 0.8*nrow(cars))  # row indices for training data
trainingData <- cars[trainingRowIndex, ]  # model training data
testData  <- cars[-trainingRowIndex, ]   # test data
lmMod <- lm(dist ~ speed, data=trainingData)  # build the model
lmMod
plot(lmMod)
plot(lmMod)
distPred <- predict(lmMod, testData)  # predict distance
lmMod <- lm(dist ~ speed, data=trainingData)  # build the model
summary (lmMod)  # model summary
lmMod
head(cars)
actuals_preds <- data.frame(cbind(actuals=testData$dist, predicteds=distPred))
# make actuals_predicteds dataframe.
View(actuals_preds)
View(actuals_preds)
actuals_preds <- data.frame(cbind(actuals=testData, predicteds=distPred))
# make actuals_predicteds dataframe.
head(airquality)
head(CO2)
head(iris)
?lm
lm
#Visualizing Positively Skewed Data:---------------------------------------
hist(PosSkew, prob=TRUE, col="grey",
sub=paste("Skewness:", round(e1071::skewness(PosSkew), 2)))
lines(density(PosSkew, adjust=2), lty="dotted", col="darkgreen", lwd=2)
abline(v=mean(PosSkew),col="blue",lwd=2) #Mean
abline(v=median(PosSkew),col="red",lwd=2)  #Median
abline(v=Mode(PosSkew),col="brown",lwd=2)  #Mode
legend("topright", inset=.05, title="Legend",
c("Mean","Median","Mode"), fill=c("blue","red","brown"))
#--------------------------------------------------------------------------
rm(list=ls())
v<-c(1,5,7)
mat<-matrix(1;20,ncol=2)
mat<-matrix(1:20,ncol=2)
mat
mat[-v,]
v<-as.vector(v)
v<-vector(mode = "numeric",length=3)
setwd("~/Documents/C++/Networking/Datagram")
